-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/tiger.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Exp                                 (0)
	Exp -> let Decs in Seq end                         (1)
	Exp -> Exp1                                        (2)
	Decs -> Dec Decs                                   (3)
	Decs -> Dec                                        (4)
	Dec -> TyDec                                       (5)
	Dec -> VarDec                                      (6)
	Dec -> FunDec                                      (7)
	TyDec -> type id '=' Ty                            (8)
	TyId -> id                                         (9)
	Ty -> id                                           (10)
	Ty -> array of id                                  (11)
	Ty -> '{' TyFs '}'                                 (12)
	TyFs -> id ':' id ',' TyFs                         (13)
	TyFs -> id ':' id                                  (14)
	TyFs ->                                            (15)
	VarDec -> var id ':=' Exp                          (16)
	VarDec -> var id ':' TyId ':=' Exp                 (17)
	OptTyAnn -> ':' TyId                               (18)
	OptTyAnn ->                                        (19)
	FunDec -> function id '(' TyFs ')' OptTyAnn '=' Exp   (20)
	Seq -> Exp                                         (21)
	Seq -> Exp ';' Seq                                 (22)
	LVal -> id                                         (23)
	LVal -> LVal1                                      (24)
	LVal1 -> id '[' Exp1 ']'                           (25)
	LVal1 -> LVal1 '[' Exp1 ']'                        (26)
	LVal1 -> id '.' id                                 (27)
	LVal1 -> LVal1 '.' id                              (28)
	Exp1 -> Exp1 '+' Exp1                              (29)
	Exp1 -> Exp1 '-' Exp1                              (30)
	Exp1 -> Exp1 '*' Exp1                              (31)
	Exp1 -> Exp1 '/' Exp1                              (32)
	Exp1 -> Exp1 '&' Exp1                              (33)
	Exp1 -> Exp1 '|' Exp1                              (34)
	Exp1 -> Exp1 '=' Exp1                              (35)
	Exp1 -> Exp1 '<>' Exp1                             (36)
	Exp1 -> Exp1 '>' Exp1                              (37)
	Exp1 -> Exp1 '<' Exp1                              (38)
	Exp1 -> Exp1 '>=' Exp1                             (39)
	Exp1 -> Exp1 '<=' Exp1                             (40)
	Exp1 -> LVal ':=' Exp1                             (41)
	Exp1 -> Atom                                       (42)
	Exp1 -> id '(' Vals ')'                            (43)
	Exp1 -> '(' Seq ')'                                (44)
	Exp1 -> '(' ')'                                    (45)
	Exp1 -> while Exp1 do Exp                          (46)
	Exp1 -> for id ':=' Exp1 to Exp1 do Exp            (47)
	Exp1 -> if Exp1 then Exp                           (48)
	Exp1 -> if Exp1 then Exp else Exp                  (49)
	Exp1 -> break                                      (50)
	Vals -> Exp1                                       (51)
	Vals -> Exp1 ',' Vals                              (52)
	Vals ->                                            (53)
	Atom -> num                                        (54)
	Atom -> str                                        (55)
	Atom -> nil                                        (56)
	Atom -> id '{' RecFs '}'                           (57)
	Atom -> id '[' Exp1 ']' Arr1                       (58)
	Atom -> LVal                                       (59)
	Atom -> '-' Exp1                                   (60)
	Arr1 -> of Exp1                                    (61)
	RecFs -> id '=' Exp1                               (62)
	RecFs -> id '=' Exp1 ',' RecFs                     (63)
	RecFs ->                                           (64)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	if             { (_, $$@If) }
	'-'            { (_, $$@Negation) }
	'('            { (_, $$@LParen) }
	')'            { (_, $$@RParen) }
	'{'            { (_, $$@LBrace) }
	'}'            { (_, $$@RBrace) }
	'['            { (_, $$@LBracket) }
	']'            { (_, $$@RBracket) }
	','            { (_, $$@Comma) }
	':'            { (_, $$@Colon) }
	';'            { (_, $$@Semicolon) }
	type           { (_, $$@Type) }
	then           { (_, $$@Then) }
	else           { (_, $$@Else) }
	var            { (_, $$@Var) }
	function       { (_, $$@Function) }
	let            { (_, $$@Let) }
	in             { (_, $$@In) }
	end            { (_, $$@End) }
	':='           { (_, $$@Bind) }
	array          { (_, $$@Array) }
	of             { (_, $$@Of) }
	while          { (_, $$@While) }
	for            { (_, $$@For) }
	to             { (_, $$@To) }
	break          { (_, $$@Break) }
	do             { (_, $$@Do) }
	nil            { (_, $$@Nil) }
	'+'            { (_, $$@Plus) }
	'*'            { (_, $$@Times) }
	'/'            { (_, $$@Div) }
	'='            { (_, $$@Eq) }
	'<>'           { (_, $$@NotEq) }
	'<'            { (_, $$@LT) }
	'<='           { (_, $$@LTE) }
	'>'            { (_, $$@GT) }
	'>='           { (_, $$@GTE) }
	'&'            { (_, $$@And) }
	'|'            { (_, $$@Or) }
	'.'            { (_, $$@Dot) }
	id             { (_, Id $$) }
	num            { (_, Num $$) }
	str            { (_, StringL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Exp             rules 1, 2
	Decs            rules 3, 4
	Dec             rules 5, 6, 7
	TyDec           rule  8
	TyId            rule  9
	Ty              rules 10, 11, 12
	TyFs            rules 13, 14, 15
	VarDec          rules 16, 17
	OptTyAnn        rules 18, 19
	FunDec          rule  20
	Seq             rules 21, 22
	LVal            rules 23, 24
	LVal1           rules 25, 26, 27, 28
	Exp1            rules 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50
	Vals            rules 51, 52, 53
	Atom            rules 54, 55, 56, 57, 58, 59, 60
	Arr1            rule  61
	RecFs           rules 62, 63, 64

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Exp                                (rule 0)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 3
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 1

	Exp -> . let Decs in Seq end                        (rule 1)

	let            shift, and enter state 2


State 2

	Exp -> let . Decs in Seq end                        (rule 1)

	type           shift, and enter state 49
	var            shift, and enter state 50
	function       shift, and enter state 51

	Decs           goto state 44
	Dec            goto state 45
	TyDec          goto state 46
	VarDec         goto state 47
	FunDec         goto state 48

State 3

	%start_calc -> Exp .                                (rule 0)

	%eof           accept


State 4

	Exp1 -> LVal . ':=' Exp1                            (rule 41)
	Atom -> LVal .                                      (rule 59)

	'-'            reduce using rule 59
	')'            reduce using rule 59
	'}'            reduce using rule 59
	']'            reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	type           reduce using rule 59
	then           reduce using rule 59
	else           reduce using rule 59
	var            reduce using rule 59
	function       reduce using rule 59
	in             reduce using rule 59
	end            reduce using rule 59
	':='           shift, and enter state 43
	to             reduce using rule 59
	do             reduce using rule 59
	'+'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'='            reduce using rule 59
	'<>'           reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'&'            reduce using rule 59
	'|'            reduce using rule 59
	%eof           reduce using rule 59


State 5

	LVal -> LVal1 .                                     (rule 24)
	LVal1 -> LVal1 . '[' Exp1 ']'                       (rule 26)
	LVal1 -> LVal1 . '.' id                             (rule 28)

	'-'            reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	'['            shift, and enter state 41
	']'            reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	type           reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	var            reduce using rule 24
	function       reduce using rule 24
	in             reduce using rule 24
	end            reduce using rule 24
	':='           reduce using rule 24
	to             reduce using rule 24
	do             reduce using rule 24
	'+'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'='            reduce using rule 24
	'<>'           reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	'&'            reduce using rule 24
	'|'            reduce using rule 24
	'.'            shift, and enter state 42
	%eof           reduce using rule 24


State 6

	Exp -> Exp1 .                                       (rule 2)
	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 2
	'}'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	type           reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	var            reduce using rule 2
	function       reduce using rule 2
	in             reduce using rule 2
	end            reduce using rule 2
	to             reduce using rule 2
	do             reduce using rule 2
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 2


State 7

	Exp1 -> Atom .                                      (rule 42)

	'-'            reduce using rule 42
	')'            reduce using rule 42
	'}'            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	type           reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	var            reduce using rule 42
	function       reduce using rule 42
	in             reduce using rule 42
	end            reduce using rule 42
	to             reduce using rule 42
	do             reduce using rule 42
	'+'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'='            reduce using rule 42
	'<>'           reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'&'            reduce using rule 42
	'|'            reduce using rule 42
	%eof           reduce using rule 42


State 8

	Exp1 -> if . Exp1 then Exp                          (rule 48)
	Exp1 -> if . Exp1 then Exp else Exp                 (rule 49)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 28
	Atom           goto state 7

State 9

	Atom -> '-' . Exp1                                  (rule 60)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 27
	Atom           goto state 7

State 10

	Exp1 -> '(' . Seq ')'                               (rule 44)
	Exp1 -> '(' . ')'                                   (rule 45)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	')'            shift, and enter state 26
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 24
	Seq            goto state 25
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 11

	Exp1 -> while . Exp1 do Exp                         (rule 46)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 23
	Atom           goto state 7

State 12

	Exp1 -> for . id ':=' Exp1 to Exp1 do Exp           (rule 47)

	id             shift, and enter state 22


State 13

	Exp1 -> break .                                     (rule 50)

	'-'            reduce using rule 50
	')'            reduce using rule 50
	'}'            reduce using rule 50
	']'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	type           reduce using rule 50
	then           reduce using rule 50
	else           reduce using rule 50
	var            reduce using rule 50
	function       reduce using rule 50
	in             reduce using rule 50
	end            reduce using rule 50
	to             reduce using rule 50
	do             reduce using rule 50
	'+'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	'='            reduce using rule 50
	'<>'           reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'&'            reduce using rule 50
	'|'            reduce using rule 50
	%eof           reduce using rule 50


State 14

	Atom -> nil .                                       (rule 56)

	'-'            reduce using rule 56
	')'            reduce using rule 56
	'}'            reduce using rule 56
	']'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	type           reduce using rule 56
	then           reduce using rule 56
	else           reduce using rule 56
	var            reduce using rule 56
	function       reduce using rule 56
	in             reduce using rule 56
	end            reduce using rule 56
	to             reduce using rule 56
	do             reduce using rule 56
	'+'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	'='            reduce using rule 56
	'<>'           reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'&'            reduce using rule 56
	'|'            reduce using rule 56
	%eof           reduce using rule 56


State 15

	LVal -> id .                                        (rule 23)
	LVal1 -> id . '[' Exp1 ']'                          (rule 25)
	LVal1 -> id . '.' id                                (rule 27)
	Exp1 -> id . '(' Vals ')'                           (rule 43)
	Atom -> id . '{' RecFs '}'                          (rule 57)
	Atom -> id . '[' Exp1 ']' Arr1                      (rule 58)

	'-'            reduce using rule 23
	'('            shift, and enter state 18
	')'            reduce using rule 23
	'{'            shift, and enter state 19
	'}'            reduce using rule 23
	'['            shift, and enter state 20
	']'            reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	type           reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	var            reduce using rule 23
	function       reduce using rule 23
	in             reduce using rule 23
	end            reduce using rule 23
	':='           reduce using rule 23
	to             reduce using rule 23
	do             reduce using rule 23
	'+'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'='            reduce using rule 23
	'<>'           reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	'&'            reduce using rule 23
	'|'            reduce using rule 23
	'.'            shift, and enter state 21
	%eof           reduce using rule 23


State 16

	Atom -> num .                                       (rule 54)

	'-'            reduce using rule 54
	')'            reduce using rule 54
	'}'            reduce using rule 54
	']'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	type           reduce using rule 54
	then           reduce using rule 54
	else           reduce using rule 54
	var            reduce using rule 54
	function       reduce using rule 54
	in             reduce using rule 54
	end            reduce using rule 54
	to             reduce using rule 54
	do             reduce using rule 54
	'+'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	'='            reduce using rule 54
	'<>'           reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'&'            reduce using rule 54
	'|'            reduce using rule 54
	%eof           reduce using rule 54


State 17

	Atom -> str .                                       (rule 55)

	'-'            reduce using rule 55
	')'            reduce using rule 55
	'}'            reduce using rule 55
	']'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	type           reduce using rule 55
	then           reduce using rule 55
	else           reduce using rule 55
	var            reduce using rule 55
	function       reduce using rule 55
	in             reduce using rule 55
	end            reduce using rule 55
	to             reduce using rule 55
	do             reduce using rule 55
	'+'            reduce using rule 55
	'*'            reduce using rule 55
	'/'            reduce using rule 55
	'='            reduce using rule 55
	'<>'           reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'&'            reduce using rule 55
	'|'            reduce using rule 55
	%eof           reduce using rule 55


State 18

	Exp1 -> id '(' . Vals ')'                           (rule 43)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	')'            reduce using rule 53
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 81
	Vals           goto state 82
	Atom           goto state 7

State 19

	Atom -> id '{' . RecFs '}'                          (rule 57)

	'}'            reduce using rule 64
	id             shift, and enter state 80

	RecFs          goto state 79

State 20

	LVal1 -> id '[' . Exp1 ']'                          (rule 25)
	Atom -> id '[' . Exp1 ']' Arr1                      (rule 58)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 78
	Atom           goto state 7

State 21

	LVal1 -> id '.' . id                                (rule 27)

	id             shift, and enter state 77


State 22

	Exp1 -> for id . ':=' Exp1 to Exp1 do Exp           (rule 47)

	':='           shift, and enter state 76


State 23

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> while Exp1 . do Exp                         (rule 46)

	'-'            shift, and enter state 29
	do             shift, and enter state 75
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 24

	Seq -> Exp .                                        (rule 21)
	Seq -> Exp . ';' Seq                                (rule 22)

	')'            reduce using rule 21
	';'            shift, and enter state 74
	end            reduce using rule 21


State 25

	Exp1 -> '(' Seq . ')'                               (rule 44)

	')'            shift, and enter state 73


State 26

	Exp1 -> '(' ')' .                                   (rule 45)

	'-'            reduce using rule 45
	')'            reduce using rule 45
	'}'            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	type           reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	var            reduce using rule 45
	function       reduce using rule 45
	in             reduce using rule 45
	end            reduce using rule 45
	to             reduce using rule 45
	do             reduce using rule 45
	'+'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'='            reduce using rule 45
	'<>'           reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'&'            reduce using rule 45
	'|'            reduce using rule 45
	%eof           reduce using rule 45


State 27

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Atom -> '-' Exp1 .                                  (rule 60)

	'-'            reduce using rule 60
	')'            reduce using rule 60
	'}'            reduce using rule 60
	']'            reduce using rule 60
	','            reduce using rule 60
	';'            reduce using rule 60
	type           reduce using rule 60
	then           reduce using rule 60
	else           reduce using rule 60
	var            reduce using rule 60
	function       reduce using rule 60
	in             reduce using rule 60
	end            reduce using rule 60
	to             reduce using rule 60
	do             reduce using rule 60
	'+'            reduce using rule 60
	'*'            reduce using rule 60
	'/'            reduce using rule 60
	'='            reduce using rule 60
	'<>'           reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'&'            reduce using rule 60
	'|'            reduce using rule 60
	%eof           reduce using rule 60


State 28

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> if Exp1 . then Exp                          (rule 48)
	Exp1 -> if Exp1 . then Exp else Exp                 (rule 49)

	'-'            shift, and enter state 29
	then           shift, and enter state 72
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 29

	Exp1 -> Exp1 '-' . Exp1                             (rule 30)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 71
	Atom           goto state 7

State 30

	Exp1 -> Exp1 '+' . Exp1                             (rule 29)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 70
	Atom           goto state 7

State 31

	Exp1 -> Exp1 '*' . Exp1                             (rule 31)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 69
	Atom           goto state 7

State 32

	Exp1 -> Exp1 '/' . Exp1                             (rule 32)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 68
	Atom           goto state 7

State 33

	Exp1 -> Exp1 '=' . Exp1                             (rule 35)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 67
	Atom           goto state 7

State 34

	Exp1 -> Exp1 '<>' . Exp1                            (rule 36)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 66
	Atom           goto state 7

State 35

	Exp1 -> Exp1 '<' . Exp1                             (rule 38)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 65
	Atom           goto state 7

State 36

	Exp1 -> Exp1 '<=' . Exp1                            (rule 40)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 64
	Atom           goto state 7

State 37

	Exp1 -> Exp1 '>' . Exp1                             (rule 37)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 63
	Atom           goto state 7

State 38

	Exp1 -> Exp1 '>=' . Exp1                            (rule 39)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 62
	Atom           goto state 7

State 39

	Exp1 -> Exp1 '&' . Exp1                             (rule 33)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 61
	Atom           goto state 7

State 40

	Exp1 -> Exp1 '|' . Exp1                             (rule 34)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 60
	Atom           goto state 7

State 41

	LVal1 -> LVal1 '[' . Exp1 ']'                       (rule 26)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 59
	Atom           goto state 7

State 42

	LVal1 -> LVal1 '.' . id                             (rule 28)

	id             shift, and enter state 58


State 43

	Exp1 -> LVal ':=' . Exp1                            (rule 41)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 57
	Atom           goto state 7

State 44

	Exp -> let Decs . in Seq end                        (rule 1)

	in             shift, and enter state 56


State 45

	Decs -> Dec . Decs                                  (rule 3)
	Decs -> Dec .                                       (rule 4)

	type           shift, and enter state 49
	var            shift, and enter state 50
	function       shift, and enter state 51
	in             reduce using rule 4

	Decs           goto state 55
	Dec            goto state 45
	TyDec          goto state 46
	VarDec         goto state 47
	FunDec         goto state 48

State 46

	Dec -> TyDec .                                      (rule 5)

	type           reduce using rule 5
	var            reduce using rule 5
	function       reduce using rule 5
	in             reduce using rule 5


State 47

	Dec -> VarDec .                                     (rule 6)

	type           reduce using rule 6
	var            reduce using rule 6
	function       reduce using rule 6
	in             reduce using rule 6


State 48

	Dec -> FunDec .                                     (rule 7)

	type           reduce using rule 7
	var            reduce using rule 7
	function       reduce using rule 7
	in             reduce using rule 7


State 49

	TyDec -> type . id '=' Ty                           (rule 8)

	id             shift, and enter state 54


State 50

	VarDec -> var . id ':=' Exp                         (rule 16)
	VarDec -> var . id ':' TyId ':=' Exp                (rule 17)

	id             shift, and enter state 53


State 51

	FunDec -> function . id '(' TyFs ')' OptTyAnn '=' Exp    (rule 20)

	id             shift, and enter state 52


State 52

	FunDec -> function id . '(' TyFs ')' OptTyAnn '=' Exp    (rule 20)

	'('            shift, and enter state 97


State 53

	VarDec -> var id . ':=' Exp                         (rule 16)
	VarDec -> var id . ':' TyId ':=' Exp                (rule 17)

	':'            shift, and enter state 95
	':='           shift, and enter state 96


State 54

	TyDec -> type id . '=' Ty                           (rule 8)

	'='            shift, and enter state 94


State 55

	Decs -> Dec Decs .                                  (rule 3)

	in             reduce using rule 3


State 56

	Exp -> let Decs in . Seq end                        (rule 1)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 24
	Seq            goto state 93
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 57

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> LVal ':=' Exp1 .                            (rule 41)

	'-'            shift, and enter state 29
	')'            reduce using rule 41
	'}'            reduce using rule 41
	']'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	type           reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	var            reduce using rule 41
	function       reduce using rule 41
	in             reduce using rule 41
	end            reduce using rule 41
	to             reduce using rule 41
	do             reduce using rule 41
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 41


State 58

	LVal1 -> LVal1 '.' id .                             (rule 28)

	'-'            reduce using rule 28
	')'            reduce using rule 28
	'}'            reduce using rule 28
	'['            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	type           reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	var            reduce using rule 28
	function       reduce using rule 28
	in             reduce using rule 28
	end            reduce using rule 28
	':='           reduce using rule 28
	to             reduce using rule 28
	do             reduce using rule 28
	'+'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'='            reduce using rule 28
	'<>'           reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'&'            reduce using rule 28
	'|'            reduce using rule 28
	'.'            reduce using rule 28
	%eof           reduce using rule 28


State 59

	LVal1 -> LVal1 '[' Exp1 . ']'                       (rule 26)
	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	']'            shift, and enter state 92
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 60

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 '|' Exp1 .                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 34
	'}'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	type           reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	var            reduce using rule 34
	function       reduce using rule 34
	in             reduce using rule 34
	end            reduce using rule 34
	to             reduce using rule 34
	do             reduce using rule 34
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'&'            reduce using rule 34
	'|'            reduce using rule 34
	%eof           reduce using rule 34


State 61

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 '&' Exp1 .                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 33
	'}'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	';'            reduce using rule 33
	type           reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	var            reduce using rule 33
	function       reduce using rule 33
	in             reduce using rule 33
	end            reduce using rule 33
	to             reduce using rule 33
	do             reduce using rule 33
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'&'            reduce using rule 33
	'|'            reduce using rule 33
	%eof           reduce using rule 33


State 62

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 '>=' Exp1 .                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 39
	'}'            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	type           reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	var            reduce using rule 39
	function       reduce using rule 39
	in             reduce using rule 39
	end            reduce using rule 39
	to             reduce using rule 39
	do             reduce using rule 39
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 39


State 63

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 '>' Exp1 .                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 37
	'}'            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	type           reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	var            reduce using rule 37
	function       reduce using rule 37
	in             reduce using rule 37
	end            reduce using rule 37
	to             reduce using rule 37
	do             reduce using rule 37
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 37


State 64

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> Exp1 '<=' Exp1 .                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 40
	'}'            reduce using rule 40
	']'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	type           reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	var            reduce using rule 40
	function       reduce using rule 40
	in             reduce using rule 40
	end            reduce using rule 40
	to             reduce using rule 40
	do             reduce using rule 40
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 40
	'<>'           reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 40


State 65

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 '<' Exp1 .                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 38
	'}'            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	var            reduce using rule 38
	function       reduce using rule 38
	in             reduce using rule 38
	end            reduce using rule 38
	to             reduce using rule 38
	do             reduce using rule 38
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 38


State 66

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 '<>' Exp1 .                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 36
	'}'            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	type           reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	var            reduce using rule 36
	function       reduce using rule 36
	in             reduce using rule 36
	end            reduce using rule 36
	to             reduce using rule 36
	do             reduce using rule 36
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 36


State 67

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 '=' Exp1 .                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            shift, and enter state 29
	')'            reduce using rule 35
	'}'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	type           reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	var            reduce using rule 35
	function       reduce using rule 35
	in             reduce using rule 35
	end            reduce using rule 35
	to             reduce using rule 35
	do             reduce using rule 35
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 35


State 68

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 '/' Exp1 .                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	type           reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	var            reduce using rule 32
	function       reduce using rule 32
	in             reduce using rule 32
	end            reduce using rule 32
	to             reduce using rule 32
	do             reduce using rule 32
	'+'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'='            reduce using rule 32
	'<>'           reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'&'            reduce using rule 32
	'|'            reduce using rule 32
	%eof           reduce using rule 32


State 69

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 '*' Exp1 .                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	type           reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	var            reduce using rule 31
	function       reduce using rule 31
	in             reduce using rule 31
	end            reduce using rule 31
	to             reduce using rule 31
	do             reduce using rule 31
	'+'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'='            reduce using rule 31
	'<>'           reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'&'            reduce using rule 31
	'|'            reduce using rule 31
	%eof           reduce using rule 31


State 70

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 '+' Exp1 .                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	type           reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	var            reduce using rule 29
	function       reduce using rule 29
	in             reduce using rule 29
	end            reduce using rule 29
	to             reduce using rule 29
	do             reduce using rule 29
	'+'            reduce using rule 29
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 29
	'<>'           reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'&'            reduce using rule 29
	'|'            reduce using rule 29
	%eof           reduce using rule 29


State 71

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 '-' Exp1 .                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)

	'-'            reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	type           reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	var            reduce using rule 30
	function       reduce using rule 30
	in             reduce using rule 30
	end            reduce using rule 30
	to             reduce using rule 30
	do             reduce using rule 30
	'+'            reduce using rule 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            reduce using rule 30
	'<>'           reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'&'            reduce using rule 30
	'|'            reduce using rule 30
	%eof           reduce using rule 30


State 72

	Exp1 -> if Exp1 then . Exp                          (rule 48)
	Exp1 -> if Exp1 then . Exp else Exp                 (rule 49)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 91
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 73

	Exp1 -> '(' Seq ')' .                               (rule 44)

	'-'            reduce using rule 44
	')'            reduce using rule 44
	'}'            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	type           reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	var            reduce using rule 44
	function       reduce using rule 44
	in             reduce using rule 44
	end            reduce using rule 44
	to             reduce using rule 44
	do             reduce using rule 44
	'+'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'='            reduce using rule 44
	'<>'           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'&'            reduce using rule 44
	'|'            reduce using rule 44
	%eof           reduce using rule 44


State 74

	Seq -> Exp ';' . Seq                                (rule 22)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 24
	Seq            goto state 90
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 75

	Exp1 -> while Exp1 do . Exp                         (rule 46)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 89
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 76

	Exp1 -> for id ':=' . Exp1 to Exp1 do Exp           (rule 47)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 88
	Atom           goto state 7

State 77

	LVal1 -> id '.' id .                                (rule 27)

	'-'            reduce using rule 27
	')'            reduce using rule 27
	'}'            reduce using rule 27
	'['            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	type           reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	var            reduce using rule 27
	function       reduce using rule 27
	in             reduce using rule 27
	end            reduce using rule 27
	':='           reduce using rule 27
	to             reduce using rule 27
	do             reduce using rule 27
	'+'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'='            reduce using rule 27
	'<>'           reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'&'            reduce using rule 27
	'|'            reduce using rule 27
	'.'            reduce using rule 27
	%eof           reduce using rule 27


State 78

	LVal1 -> id '[' Exp1 . ']'                          (rule 25)
	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Atom -> id '[' Exp1 . ']' Arr1                      (rule 58)

	'-'            shift, and enter state 29
	']'            shift, and enter state 87
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 79

	Atom -> id '{' RecFs . '}'                          (rule 57)

	'}'            shift, and enter state 86


State 80

	RecFs -> id . '=' Exp1                              (rule 62)
	RecFs -> id . '=' Exp1 ',' RecFs                    (rule 63)

	'='            shift, and enter state 85


State 81

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Vals -> Exp1 .                                      (rule 51)
	Vals -> Exp1 . ',' Vals                             (rule 52)

	'-'            shift, and enter state 29
	')'            reduce using rule 51
	','            shift, and enter state 84
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 82

	Exp1 -> id '(' Vals . ')'                           (rule 43)

	')'            shift, and enter state 83


State 83

	Exp1 -> id '(' Vals ')' .                           (rule 43)

	'-'            reduce using rule 43
	')'            reduce using rule 43
	'}'            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	type           reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	var            reduce using rule 43
	function       reduce using rule 43
	in             reduce using rule 43
	end            reduce using rule 43
	to             reduce using rule 43
	do             reduce using rule 43
	'+'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'='            reduce using rule 43
	'<>'           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'&'            reduce using rule 43
	'|'            reduce using rule 43
	%eof           reduce using rule 43


State 84

	Vals -> Exp1 ',' . Vals                             (rule 52)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	')'            reduce using rule 53
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 81
	Vals           goto state 113
	Atom           goto state 7

State 85

	RecFs -> id '=' . Exp1                              (rule 62)
	RecFs -> id '=' . Exp1 ',' RecFs                    (rule 63)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 112
	Atom           goto state 7

State 86

	Atom -> id '{' RecFs '}' .                          (rule 57)

	'-'            reduce using rule 57
	')'            reduce using rule 57
	'}'            reduce using rule 57
	']'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	type           reduce using rule 57
	then           reduce using rule 57
	else           reduce using rule 57
	var            reduce using rule 57
	function       reduce using rule 57
	in             reduce using rule 57
	end            reduce using rule 57
	to             reduce using rule 57
	do             reduce using rule 57
	'+'            reduce using rule 57
	'*'            reduce using rule 57
	'/'            reduce using rule 57
	'='            reduce using rule 57
	'<>'           reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'&'            reduce using rule 57
	'|'            reduce using rule 57
	%eof           reduce using rule 57


State 87

	LVal1 -> id '[' Exp1 ']' .                          (rule 25)
	Atom -> id '[' Exp1 ']' . Arr1                      (rule 58)

	'-'            reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	'['            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	type           reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	var            reduce using rule 25
	function       reduce using rule 25
	in             reduce using rule 25
	end            reduce using rule 25
	':='           reduce using rule 25
	of             shift, and enter state 111
	to             reduce using rule 25
	do             reduce using rule 25
	'+'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'='            reduce using rule 25
	'<>'           reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	'&'            reduce using rule 25
	'|'            reduce using rule 25
	'.'            reduce using rule 25
	%eof           reduce using rule 25

	Arr1           goto state 110

State 88

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> for id ':=' Exp1 . to Exp1 do Exp           (rule 47)

	'-'            shift, and enter state 29
	to             shift, and enter state 109
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 89

	Exp1 -> while Exp1 do Exp .                         (rule 46)

	'-'            reduce using rule 46
	')'            reduce using rule 46
	'}'            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	type           reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	var            reduce using rule 46
	function       reduce using rule 46
	in             reduce using rule 46
	end            reduce using rule 46
	to             reduce using rule 46
	do             reduce using rule 46
	'+'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'='            reduce using rule 46
	'<>'           reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'&'            reduce using rule 46
	'|'            reduce using rule 46
	%eof           reduce using rule 46


State 90

	Seq -> Exp ';' Seq .                                (rule 22)

	')'            reduce using rule 22
	end            reduce using rule 22


State 91

	Exp1 -> if Exp1 then Exp .                          (rule 48)
	Exp1 -> if Exp1 then Exp . else Exp                 (rule 49)

	'-'            reduce using rule 48
	')'            reduce using rule 48
	'}'            reduce using rule 48
	']'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	type           reduce using rule 48
	then           reduce using rule 48
	else           shift, and enter state 108
	var            reduce using rule 48
	function       reduce using rule 48
	in             reduce using rule 48
	end            reduce using rule 48
	to             reduce using rule 48
	do             reduce using rule 48
	'+'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'='            reduce using rule 48
	'<>'           reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'&'            reduce using rule 48
	'|'            reduce using rule 48
	%eof           reduce using rule 48


State 92

	LVal1 -> LVal1 '[' Exp1 ']' .                       (rule 26)

	'-'            reduce using rule 26
	')'            reduce using rule 26
	'}'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	type           reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	var            reduce using rule 26
	function       reduce using rule 26
	in             reduce using rule 26
	end            reduce using rule 26
	':='           reduce using rule 26
	to             reduce using rule 26
	do             reduce using rule 26
	'+'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'='            reduce using rule 26
	'<>'           reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'&'            reduce using rule 26
	'|'            reduce using rule 26
	'.'            reduce using rule 26
	%eof           reduce using rule 26


State 93

	Exp -> let Decs in Seq . end                        (rule 1)

	end            shift, and enter state 107


State 94

	TyDec -> type id '=' . Ty                           (rule 8)

	'{'            shift, and enter state 104
	array          shift, and enter state 105
	id             shift, and enter state 106

	Ty             goto state 103

State 95

	VarDec -> var id ':' . TyId ':=' Exp                (rule 17)

	id             shift, and enter state 102

	TyId           goto state 101

State 96

	VarDec -> var id ':=' . Exp                         (rule 16)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 100
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 97

	FunDec -> function id '(' . TyFs ')' OptTyAnn '=' Exp    (rule 20)

	')'            reduce using rule 15
	id             shift, and enter state 99

	TyFs           goto state 98

State 98

	FunDec -> function id '(' TyFs . ')' OptTyAnn '=' Exp    (rule 20)

	')'            shift, and enter state 122


State 99

	TyFs -> id . ':' id ',' TyFs                        (rule 13)
	TyFs -> id . ':' id                                 (rule 14)

	':'            shift, and enter state 121


State 100

	VarDec -> var id ':=' Exp .                         (rule 16)

	type           reduce using rule 16
	var            reduce using rule 16
	function       reduce using rule 16
	in             reduce using rule 16


State 101

	VarDec -> var id ':' TyId . ':=' Exp                (rule 17)

	':='           shift, and enter state 120


State 102

	TyId -> id .                                        (rule 9)

	':='           reduce using rule 9
	'='            reduce using rule 9


State 103

	TyDec -> type id '=' Ty .                           (rule 8)

	type           reduce using rule 8
	var            reduce using rule 8
	function       reduce using rule 8
	in             reduce using rule 8


State 104

	Ty -> '{' . TyFs '}'                                (rule 12)

	'}'            reduce using rule 15
	id             shift, and enter state 99

	TyFs           goto state 119

State 105

	Ty -> array . of id                                 (rule 11)

	of             shift, and enter state 118


State 106

	Ty -> id .                                          (rule 10)

	type           reduce using rule 10
	var            reduce using rule 10
	function       reduce using rule 10
	in             reduce using rule 10


State 107

	Exp -> let Decs in Seq end .                        (rule 1)

	'-'            reduce using rule 1
	')'            reduce using rule 1
	'}'            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	';'            reduce using rule 1
	type           reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	var            reduce using rule 1
	function       reduce using rule 1
	in             reduce using rule 1
	end            reduce using rule 1
	to             reduce using rule 1
	do             reduce using rule 1
	'+'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'='            reduce using rule 1
	'<>'           reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'&'            reduce using rule 1
	'|'            reduce using rule 1
	%eof           reduce using rule 1


State 108

	Exp1 -> if Exp1 then Exp else . Exp                 (rule 49)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 117
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 109

	Exp1 -> for id ':=' Exp1 to . Exp1 do Exp           (rule 47)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 116
	Atom           goto state 7

State 110

	Atom -> id '[' Exp1 ']' Arr1 .                      (rule 58)

	'-'            reduce using rule 58
	')'            reduce using rule 58
	'}'            reduce using rule 58
	']'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	type           reduce using rule 58
	then           reduce using rule 58
	else           reduce using rule 58
	var            reduce using rule 58
	function       reduce using rule 58
	in             reduce using rule 58
	end            reduce using rule 58
	to             reduce using rule 58
	do             reduce using rule 58
	'+'            reduce using rule 58
	'*'            reduce using rule 58
	'/'            reduce using rule 58
	'='            reduce using rule 58
	'<>'           reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'&'            reduce using rule 58
	'|'            reduce using rule 58
	%eof           reduce using rule 58


State 111

	Arr1 -> of . Exp1                                   (rule 61)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 115
	Atom           goto state 7

State 112

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	RecFs -> id '=' Exp1 .                              (rule 62)
	RecFs -> id '=' Exp1 . ',' RecFs                    (rule 63)

	'-'            shift, and enter state 29
	'}'            reduce using rule 62
	','            shift, and enter state 114
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 113

	Vals -> Exp1 ',' Vals .                             (rule 52)

	')'            reduce using rule 52


State 114

	RecFs -> id '=' Exp1 ',' . RecFs                    (rule 63)

	'}'            reduce using rule 64
	id             shift, and enter state 80

	RecFs          goto state 130

State 115

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Arr1 -> of Exp1 .                                   (rule 61)

	'-'            shift, and enter state 29
	')'            reduce using rule 61
	'}'            reduce using rule 61
	']'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	type           reduce using rule 61
	then           reduce using rule 61
	else           reduce using rule 61
	var            reduce using rule 61
	function       reduce using rule 61
	in             reduce using rule 61
	end            reduce using rule 61
	to             reduce using rule 61
	do             reduce using rule 61
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	%eof           reduce using rule 61


State 116

	Exp1 -> Exp1 . '+' Exp1                             (rule 29)
	Exp1 -> Exp1 . '-' Exp1                             (rule 30)
	Exp1 -> Exp1 . '*' Exp1                             (rule 31)
	Exp1 -> Exp1 . '/' Exp1                             (rule 32)
	Exp1 -> Exp1 . '&' Exp1                             (rule 33)
	Exp1 -> Exp1 . '|' Exp1                             (rule 34)
	Exp1 -> Exp1 . '=' Exp1                             (rule 35)
	Exp1 -> Exp1 . '<>' Exp1                            (rule 36)
	Exp1 -> Exp1 . '>' Exp1                             (rule 37)
	Exp1 -> Exp1 . '<' Exp1                             (rule 38)
	Exp1 -> Exp1 . '>=' Exp1                            (rule 39)
	Exp1 -> Exp1 . '<=' Exp1                            (rule 40)
	Exp1 -> for id ':=' Exp1 to Exp1 . do Exp           (rule 47)

	'-'            shift, and enter state 29
	do             shift, and enter state 129
	'+'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'='            shift, and enter state 33
	'<>'           shift, and enter state 34
	'<'            shift, and enter state 35
	'<='           shift, and enter state 36
	'>'            shift, and enter state 37
	'>='           shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40


State 117

	Exp1 -> if Exp1 then Exp else Exp .                 (rule 49)

	'-'            reduce using rule 49
	')'            reduce using rule 49
	'}'            reduce using rule 49
	']'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	type           reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	var            reduce using rule 49
	function       reduce using rule 49
	in             reduce using rule 49
	end            reduce using rule 49
	to             reduce using rule 49
	do             reduce using rule 49
	'+'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'='            reduce using rule 49
	'<>'           reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'&'            reduce using rule 49
	'|'            reduce using rule 49
	%eof           reduce using rule 49


State 118

	Ty -> array of . id                                 (rule 11)

	id             shift, and enter state 128


State 119

	Ty -> '{' TyFs . '}'                                (rule 12)

	'}'            shift, and enter state 127


State 120

	VarDec -> var id ':' TyId ':=' . Exp                (rule 17)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 126
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 121

	TyFs -> id ':' . id ',' TyFs                        (rule 13)
	TyFs -> id ':' . id                                 (rule 14)

	id             shift, and enter state 125


State 122

	FunDec -> function id '(' TyFs ')' . OptTyAnn '=' Exp    (rule 20)

	':'            shift, and enter state 124
	'='            reduce using rule 19

	OptTyAnn       goto state 123

State 123

	FunDec -> function id '(' TyFs ')' OptTyAnn . '=' Exp    (rule 20)

	'='            shift, and enter state 134


State 124

	OptTyAnn -> ':' . TyId                              (rule 18)

	id             shift, and enter state 102

	TyId           goto state 133

State 125

	TyFs -> id ':' id . ',' TyFs                        (rule 13)
	TyFs -> id ':' id .                                 (rule 14)

	')'            reduce using rule 14
	'}'            reduce using rule 14
	','            shift, and enter state 132


State 126

	VarDec -> var id ':' TyId ':=' Exp .                (rule 17)

	type           reduce using rule 17
	var            reduce using rule 17
	function       reduce using rule 17
	in             reduce using rule 17


State 127

	Ty -> '{' TyFs '}' .                                (rule 12)

	type           reduce using rule 12
	var            reduce using rule 12
	function       reduce using rule 12
	in             reduce using rule 12


State 128

	Ty -> array of id .                                 (rule 11)

	type           reduce using rule 11
	var            reduce using rule 11
	function       reduce using rule 11
	in             reduce using rule 11


State 129

	Exp1 -> for id ':=' Exp1 to Exp1 do . Exp           (rule 47)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 131
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 130

	RecFs -> id '=' Exp1 ',' RecFs .                    (rule 63)

	'}'            reduce using rule 63


State 131

	Exp1 -> for id ':=' Exp1 to Exp1 do Exp .           (rule 47)

	'-'            reduce using rule 47
	')'            reduce using rule 47
	'}'            reduce using rule 47
	']'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	type           reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	var            reduce using rule 47
	function       reduce using rule 47
	in             reduce using rule 47
	end            reduce using rule 47
	to             reduce using rule 47
	do             reduce using rule 47
	'+'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'='            reduce using rule 47
	'<>'           reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'&'            reduce using rule 47
	'|'            reduce using rule 47
	%eof           reduce using rule 47


State 132

	TyFs -> id ':' id ',' . TyFs                        (rule 13)

	')'            reduce using rule 15
	'}'            reduce using rule 15
	id             shift, and enter state 99

	TyFs           goto state 136

State 133

	OptTyAnn -> ':' TyId .                              (rule 18)

	'='            reduce using rule 18


State 134

	FunDec -> function id '(' TyFs ')' OptTyAnn '=' . Exp    (rule 20)

	if             shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 2
	while          shift, and enter state 11
	for            shift, and enter state 12
	break          shift, and enter state 13
	nil            shift, and enter state 14
	id             shift, and enter state 15
	num            shift, and enter state 16
	str            shift, and enter state 17

	Exp            goto state 135
	LVal           goto state 4
	LVal1          goto state 5
	Exp1           goto state 6
	Atom           goto state 7

State 135

	FunDec -> function id '(' TyFs ')' OptTyAnn '=' Exp .    (rule 20)

	type           reduce using rule 20
	var            reduce using rule 20
	function       reduce using rule 20
	in             reduce using rule 20


State 136

	TyFs -> id ':' id ',' TyFs .                        (rule 13)

	')'            reduce using rule 13
	'}'            reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 65
Number of terminals: 43
Number of non-terminals: 19
Number of states: 137
